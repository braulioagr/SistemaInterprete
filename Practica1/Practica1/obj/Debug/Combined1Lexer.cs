//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Braulio García R\Documents\GitHub\SistemaInterprete\Practica1\Practica1\Combined1.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Practica1 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class Combined1Lexer : Lexer {
	public const int
		PARENI=1, PAREND=2, MAS=3, MENOS=4, POR=5, INT=6, ENTRE=7, NEWLINE=8, 
		WS=9;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"PARENI", "PAREND", "MAS", "MENOS", "POR", "INT", "ENTRE", "NEWLINE", 
		"WS"
	};


	public Combined1Lexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", null, "'/'", "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PARENI", "PAREND", "MAS", "MENOS", "POR", "INT", "ENTRE", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Combined1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public override void Action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 8 : WS_action(_localctx, actionIndex); break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: Skip(); break;
		}
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\v/\b\x1\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\a\x6\a!\n\a\r\a\xE\a\"\x3\b\x3\b\x3\t\x3\t\x3\n\x6\n*\n\n\r\n\xE"+
		"\n+\x3\n\x3\n\x2\x2\x2\v\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2"+
		"\b\xF\x2\t\x11\x2\n\x13\x2\v\x3\x2\x3\x5\x2\v\f\xF\xF\"\"\x30\x2\x3\x3"+
		"\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3"+
		"\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13"+
		"\x3\x2\x2\x2\x3\x15\x3\x2\x2\x2\x5\x17\x3\x2\x2\x2\a\x19\x3\x2\x2\x2\t"+
		"\x1B\x3\x2\x2\x2\v\x1D\x3\x2\x2\x2\r \x3\x2\x2\x2\xF$\x3\x2\x2\x2\x11"+
		"&\x3\x2\x2\x2\x13)\x3\x2\x2\x2\x15\x16\a*\x2\x2\x16\x4\x3\x2\x2\x2\x17"+
		"\x18\a+\x2\x2\x18\x6\x3\x2\x2\x2\x19\x1A\a-\x2\x2\x1A\b\x3\x2\x2\x2\x1B"+
		"\x1C\a/\x2\x2\x1C\n\x3\x2\x2\x2\x1D\x1E\a,\x2\x2\x1E\f\x3\x2\x2\x2\x1F"+
		"!\x4\x32;\x2 \x1F\x3\x2\x2\x2!\"\x3\x2\x2\x2\" \x3\x2\x2\x2\"#\x3\x2\x2"+
		"\x2#\xE\x3\x2\x2\x2$%\a\x31\x2\x2%\x10\x3\x2\x2\x2&\'\a\f\x2\x2\'\x12"+
		"\x3\x2\x2\x2(*\t\x2\x2\x2)(\x3\x2\x2\x2*+\x3\x2\x2\x2+)\x3\x2\x2\x2+,"+
		"\x3\x2\x2\x2,-\x3\x2\x2\x2-.\b\n\x2\x2.\x14\x3\x2\x2\x2\x5\x2\"+\x3\x3"+
		"\n\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Practica1
